apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "stardog.fullname" . }}
  namespace: {{ include "stardog.namespace" . }}
  labels:
    helm.sh/chart: {{ include "stardog.chart" . }}
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: server
spec:
  selector:
    matchLabels:
      app: {{ include "stardog.fullname" . }}
  serviceName: {{ include "stardog.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  template:
    metadata:
      labels:
        app: {{ include "stardog.fullname" . }}
        helm.sh/chart: {{ include "stardog.chart" . }}
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/version: {{ .Chart.AppVersion }}
        app.kubernetes.io/component: server
    spec:
      {{- with .Values.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
{{ if .Values.securityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.securityContext.runAsUser }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
        fsGroup: {{ .Values.securityContext.fsGroup  }}
{{ end }}
      affinity:
        podAntiAffinity:
          {{ .Values.antiAffinity }}:
        {{- if eq .Values.antiAffinity "requiredDuringSchedulingIgnoredDuringExecution" }}
          - labelSelector:
              matchExpressions:
              - key: "app"
                operator: In
                values:
                - {{ include "stardog.fullname" . }}
            topologyKey: "kubernetes.io/hostname"
        {{- else }}
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "app"
                  operator: In
                  values:
                  - {{ include "stardog.fullname" . }}
              topologyKey: "kubernetes.io/hostname"
        {{- end }}
{{ if .Values.cluster.enabled }}
      initContainers:
      - name: wait-for-zk
        image: {{ .Values.busybox.image.repository }}:{{ .Values.busybox.image.tag }}
        imagePullPolicy: {{ .Values.busybox.image.pullPolicy }}
        command:
        - /bin/sh
        - -c
        - |
        {{ if .Values.zookeeper.enabled }}
         while :
          do
            echo "Checking for ZK followers"
            ZK_MNTR=$(echo mntr | nc {{ .Release.Name }}-zookeeper-headless.{{ include "stardog.namespace" . }} 2181)
            ZK_FOLLOWERS=$(echo "${ZK_MNTR}" | grep zk_synced_followers | awk '{print $2}')
            echo "Currently ${ZK_FOLLOWERS} ZK followers"
            if [[ "${ZK_FOLLOWERS}" -gt "1" ]]; then
              echo "ZK has two sync'd followers (with the leader that makes 3)"
              exit 0
            fi
            sleep 1
          done
        {{ else }}
          echo "Using existing zookeeper"
        {{ end }}
{{ end }}
      containers:
      - name: {{ include "stardog.fullname" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        ports:
        - containerPort: {{ .Values.ports.server }}
          name: server
        {{- if .Values.ports.sql }}
        - containerPort: {{ .Values.ports.sql }}
          name: sql
        {{- end }}
        volumeMounts:
        - name: {{ include "stardog.fullname" . }}-password
          mountPath: /etc/stardog-password
          readOnly: true
        - name: stardog-license
          mountPath: /etc/stardog-license
          readOnly: true
        - name: data
          mountPath: /var/opt/stardog/
          readOnly: false
        - name: {{ include "stardog.fullname" . }}-properties-vol
          mountPath: /etc/stardog-conf/stardog.properties
          subPath: stardog.properties
        - name: {{ include "stardog.fullname" . }}-log4j-vol
          mountPath: /var/opt/stardog/log4j2.xml
          subPath: log4j2.xml
        env:
        - name: PORT
          value: "{{ .Values.ports.server }}"
        - name: STARDOG_HOME
          value: "/var/opt/stardog/"
        - name: STARDOG_LICENSE_PATH
          value: "/etc/stardog-license/stardog-license-key.bin"
        - name: STARDOG_PROPERTIES
          value: "/etc/stardog-conf/stardog.properties"
        - name: STARDOG_SERVER_JAVA_ARGS
          value: "-XX:ActiveProcessorCount={{ .Values.resources.requests.cpu }}  -Djava.io.tmpdir={{ .Values.tmpDir }} {{ .Values.javaArgs }}"
        - name: STARDOG_PERF_JAVA_ARGS
          value: "{{ .Values.stardogPerfJavaArgs }}"
        resources:
{{ toYaml .Values.resources | indent 10 }}
        command:
        - /bin/sh
        - -c
        - |
          set -ex
          {{ .Files.Get "files/utils.sh" | indent 10 }}
          /opt/stardog/bin/stardog-admin server start --foreground --port ${PORT} --home ${STARDOG_HOME}
        livenessProbe:
          httpGet:
            path: /admin/alive
            port: server
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: /admin/healthcheck
            port: server
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                /opt/stardog/bin/stardog-admin server stop -u admin -p $(cat /etc/stardog-password/adminpw)
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      imagePullSecrets:
      - name: {{ .Release.Name }}-image-pull-secret
      - name: {{ .Release.Name }}-image-busybox-pull-secret
      volumes:
      - name: stardog-license
        secret:
          secretName: stardog-license
      - name: {{ include "stardog.fullname" . }}-properties-vol
        configMap:
          name: {{ include "stardog.fullname" . }}-properties
          items:
          - key: stardog.properties
            path: stardog.properties
      - name: {{ include "stardog.fullname" . }}-log4j-vol
        configMap:
          name: {{ include "stardog.fullname" . }}-log4j
          items:
          - key: log4j2.xml
            path: log4j2.xml
      - name: {{ include "stardog.fullname" . }}-password
        secret:
          secretName: {{ include "stardog.fullname" . }}-password
          items:
            - key: password
              path: adminpw
              mode: 444
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]{{ if .Values.persistence.storageClass }}
      storageClassName: {{ .Values.persistence.storageClass }}{{ end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
